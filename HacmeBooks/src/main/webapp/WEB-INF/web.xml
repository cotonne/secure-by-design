<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
    <!-- Context Configuration locations for Spring XML files -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext-*.xml</param-value>
    </context-param>

    <display-name>HacmeBooks</display-name>
    <!-- You may experience issues in Mozilla < version 1.2 if you use  -->
    <!-- ports other than 80 and 443, it seems to work fine with v1.2.  -->
    <!-- For further information see the following article:             -->
    <!-- http://www.javaworld.com/javaworld/jw-02-2002/jw-0215-ssl.html -->
    <context-param>
        <param-name>listenPort_http</param-name>
        <param-value>8989</param-value>
    </context-param>
    <context-param>
        <param-name>listenPort_https</param-name>
        <param-value>8443</param-value>
    </context-param>
    <!-- Possible values: hibernate (might be more in the future) -->
    <context-param>
        <param-name>daoType</param-name>
        <param-value>jdbc</param-value>
    </context-param>
    <!-- Define the basename for a resource bundle for I18N -->
    <context-param>
        <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
        <param-value>ApplicationResources</param-value>
    </context-param>
    <!-- Fallback locale if no bundles found for browser's preferred locale -->
    <!-- Force a single locale using param-name 'javax.servlet.jsp.jstl.fmt.locale' -->
    <context-param>
        <param-name>javax.servlet.jsp.jstl.fmt.fallbackLocale</param-name>
        <param-value>en</param-value>
    </context-param>

    <filter>
        <filter-name>cacheFilter</filter-name>
        <filter-class>com.opensymphony.oscache.web.filter.CacheFilter</filter-class>
    </filter>
    <filter>
        <filter-name>clickstreamFilter</filter-name>
        <filter-class>com.opensymphony.clickstream.ClickstreamFilter</filter-class>
    </filter>
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- <filter>
         <filter-name>hibernateFilter</filter-name>
         <filter-class>org.springframework.orm.hibernate.support.OpenSessionInViewFilter</filter-class>
     </filter> -->
    <filter>
        <filter-name>rewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    </filter>
    <filter>
        <filter-name>sitemesh</filter-name>
        <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
    </filter>
    <filter>
        <filter-name>exportFilter</filter-name>
        <filter-class>org.displaytag.filter.ResponseOverrideFilter</filter-class>
    </filter>

    <filter>
        <filter-name>compressionFilter</filter-name>
        <display-name>Compression Filter</display-name>
        <filter-class>com.foundstone.s3i.webapp.filter.GZIPFilter</filter-class>
    </filter>
    <filter>
        <filter-name>loginFilter</filter-name>
        <display-name>Login Filter</display-name>
        <filter-class>com.foundstone.s3i.webapp.filter.LoginFilter</filter-class>
        <init-param>
            <param-name>enabled</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>
    <filter>
        <filter-name>actionFilter</filter-name>
        <display-name>Action Filter</display-name>
        <filter-class>com.foundstone.s3i.webapp.filter.ActionFilter</filter-class>
        <init-param>
            <param-name>isSecure</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>loginFilter</filter-name>
        <url-pattern>/login.jsp</url-pattern>
        <!-- These are needed by Tomcat 5 since it does a forward to login.jsp -->
        <!--dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher-->
    </filter-mapping>
    <filter-mapping>
        <filter-name>loginFilter</filter-name>
        <url-pattern>/logout.jsp</url-pattern>
    </filter-mapping>
    <!-- Commented out for 2 reasons: 1) it's a pain when developing JSPs, and
                                      2) it causes the Signup webtest to fail -->
    <!--filter-mapping>
        <filter-name>cacheFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping-->
    <!-- The 'hibernateFilter', a.k.a. Spring's OpenSessionInViewFilter
         guarantees one session per request.  Performance seems to be the
         same if it's enabled or disabled. -->
    <!--<filter-mapping>
        <filter-name>hibernateFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>-->
    <filter-mapping>
        <filter-name>actionFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>clickstreamFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>exportFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>compressionFilter</filter-name>
        <url-pattern>*.html</url-pattern>
    </filter-mapping>
    <!--filter-mapping>
        <filter-name>rewriteFilter</filter-name>
        <url-pattern>/*</url-pattern-->
    <!-- These are needed by Tomcat 5 for forwards -->
    <!--dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher-->
    <!--/filter-mapping-->
    <filter-mapping>
        <filter-name>sitemesh</filter-name>
        <url-pattern>/*</url-pattern>
        <!-- These are needed by Tomcat 5 for forwards -->
        <!--dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher-->
    </filter-mapping>

    <listener>
        <listener-class>com.opensymphony.clickstream.ClickstreamListener</listener-class>
    </listener>
    <listener>
        <listener-class>net.sf.navigator.menu.MenuContextListener</listener-class>
    </listener>
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>
<!--    <listener>
        <listener-class>com.foundstone.s3i.webapp.listener.StartupListener</listener-class>
    </listener>-->
    <listener>
        <listener-class>com.foundstone.s3i.webapp.listener.UserCounterListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>login</servlet-name>
        <display-name>Login Servlet</display-name>
        <servlet-class>com.foundstone.s3i.webapp.action.LoginServlet</servlet-class>

        <init-param>
            <param-name>authURL</param-name>
            <param-value>j_security_check</param-value>
        </init-param>
        <init-param>
            <param-name>isSecure</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>encrypt-password</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>algorithm</param-name>
            <param-value>SHA</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>

    </servlet>

    <!-- Standard Action Servlet Configuration -->
    <servlet>
        <servlet-name>action</servlet-name>
        <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>

    <!-- Front Controller Servlet Mapping -->
    <servlet-mapping>
        <servlet-name>action</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>login</servlet-name>
        <url-pattern>/authorize/*</url-pattern>
    </servlet-mapping>

    <session-config>
        <session-timeout>10</session-timeout>
    </session-config>

    <!--
    To specify mime mappings, create a file named mime-mappings.xml, put it in your project's mergedir.
    Organize mime-mappings.xml following this DTD slice:

    <!ELEMENT mime-mapping (extension, mime-type)>
    -->

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>500</error-code>
        <location>/error.jsp</location>
    </error-page>
    <error-page>
        <error-code>400</error-code>
        <location>/index.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/403.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/404.jsp</location>
    </error-page>

    <taglib>
        <taglib-uri>/WEB-INF/tld/HacmeBooks.tld</taglib-uri>
        <taglib-location>/WEB-INF/tld/HacmeBooks.tld</taglib-location>
    </taglib>

    <resource-ref>
        <description>DB Connection</description>
        <res-ref-name>jdbc/HacmeBooks</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

    <!-- All anyone to access passwordHint and signup -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Unrestricted</web-resource-name>
            <description>All users can view</description>
            <url-pattern>/passwordHint.html</url-pattern>
            <url-pattern>/signup.html</url-pattern>
            <url-pattern>/browseBooks.html</url-pattern>
            <url-pattern>/searchBooks.html</url-pattern>
            <url-pattern>/bookDetails.html</url-pattern>
            <http-method>POST</http-method>
            <http-method>GET</http-method>
        </web-resource-collection>

        <user-data-constraint>
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <!-- Restrict all users from accessing *.html -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>AppFuse</web-resource-name>
            <description>Require users to authenticate</description>
            <url-pattern>*.html</url-pattern>
            <http-method>POST</http-method>
            <http-method>GET</http-method>
        </web-resource-collection>
        <auth-constraint>
            <description>Define who can access this url-pattern</description>
            <role-name>admin</role-name>
            <role-name>tomcat</role-name>
        </auth-constraint>
        <user-data-constraint>
            <!-- Doesn't work on Resin 
            <description>
                Encryption is not required for the application in general.
			</description>
            -->
            <transport-guarantee>NONE</transport-guarantee>
        </user-data-constraint>
    </security-constraint>
    <!-- Login Configuration -->

    <login-config>
        <auth-method>FORM</auth-method>
        <form-login-config>
            <form-login-page>/login.jsp</form-login-page>
            <form-error-page>/loginError.jsp</form-error-page>
        </form-login-config>
    </login-config>

    <!-- The admin role -->
    <security-role>
        <description>Administrator role (can edit Users)</description>
        <role-name>admin</role-name>
    </security-role>
    <!-- The tomcat role -->
    <security-role>
        <description>Default Role for All Users</description>
        <role-name>tomcat</role-name>
    </security-role>

</web-app>
